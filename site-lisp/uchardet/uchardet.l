(provide "uchardet/uchardet")

(eval-when (:compile-toplevel :load-toplevel :execute)
  (require "uchardet/defs"))

(in-package "uchardet")

(*define-dll-entry int chardet-create ((void* *))
                   *uchardet-dll-path* "chardet_create")
(*define-dll-entry void chardet-destroy (void*)
                   *uchardet-dll-path* "chardet_destroy")
(*define-dll-entry int chardet-handle-data (void* (char *) u_int)
                   *uchardet-dll-path* "chardet_handle_data")
(*define-dll-entry int chardet-data-end (void*)
                   *uchardet-dll-path* "chardet_data_end")
(*define-dll-entry int chardet-reset (void*)
                   *uchardet-dll-path* "chardet_reset")
(*define-dll-entry int chardet-get-charset (void* (char *) u_int)
                   *uchardet-dll-path* "chardet_get_charset")

(export '(detect-encoding-from-string detect-encoding))

(defun detect-encoding-from-string (str)
  (let ((ptr (si:make-chunk nil 4))
        (enc (si:make-chunk :string 32))
        (str-chunk (si:make-string-chunk str))
        (det nil))
    (chardet-create ptr)
    (setq det (si:unpack-uint32 ptr 0))
    (chardet-handle-data det str-chunk (1- (si:chunk-size str-chunk)))
    (chardet-data-end det)
    (chardet-get-charset det enc 32)
    (chardet-destroy det)
    (si:unpack-string enc 0 32)))

(defun detect-encoding ()
  (when (= (ed::point-min) (ed::point-max))
    (return-from 'detect-encoding *encoding-auto*))
  (let ((enc (cdr (assoc (detect-encoding-from-string (ed::buffer-substring (ed::point-min) (ed::point-max)))
                         `(("SHIFT_JIS" . ,ed::*encoding-sjis*)
                           ("EUC-JP"    . ,ed::*encoding-euc-jp*)
                           ("ISO-2022-JP" . ,ed::*encoding-jis*)
                           ("UTF-8"     . ,ed::*encoding-utf8*))
                         :test #'string=))))
    (or enc ed::*encoding-auto*)))

;; (setq *auto-encoding-alist*  '((".*" . uchardet:detect-encoding)))

;; (let ((det (si:make-chunk nil 4))
;;       (enc (si:make-chunk 'string 32))
;;       (str (si:make-string-chunk "‚ ‚¢‚¤‚¦‚¨"))
;;       (p nil))
;;   (winapi::chardet-create det)
;;   (setq p (si:unpack-uint32 det 0))
;;   (winapi::chardet-handle-data p str (1- (si:chunk-size str)))
;;   (winapi::chardet-data-end p)
;;   (winapi::chardet-get-charset p enc 32)
;;   (winapi::chardet-destroy p)
;;   (si:unpack-string enc 0 32))
